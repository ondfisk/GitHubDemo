---
name: Application

"on":
  push:
    branches:
      - main
    paths:
      - .github/workflows/application.yml
      - src/**
      - tests/**
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/application.yml
      - src/**
      - tests/**
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: Staging

    env:
      CONFIGURATION: Release
      RESOURCE_GROUP: GitHubDemo

    permissions:
      contents: read
      checks: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: 9.0.x

      - name: .NET Restore
        run: dotnet restore

      - name: .NET Build
        run: dotnet build --no-restore --configuration ${{ env.CONFIGURATION }}

      - name: .NET Test
        run: dotnet test --no-build --configuration ${{ env.CONFIGURATION }}

      - name: Build Container Image
        run: dotnet publish src/MovieApi/ --no-restore --configuration ${{ env.CONFIGURATION }} /t:PublishContainer -p ContainerImageTags=${{ github.sha }}

      - name: Azure Login
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
        uses: azure/login@v2.3.0
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Push Image to Azure Container Registry
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
        run: |
          CONTAINER_REGISTRY="$(az acr list --resource-group ${{ env.RESOURCE_GROUP }} --query [].name --output tsv)"
          az acr login --name "$CONTAINER_REGISTRY"
          IMAGE="$CONTAINER_REGISTRY.azurecr.io/ondfisk-githubdemo"
          docker tag "ondfisk-githubdemo:${{ github.sha }}" "$IMAGE:${{ github.sha }}"
          docker tag "ondfisk-githubdemo:${{ github.sha }}" "$IMAGE:${{ env.IMAGE_TAG }}"
          docker push "$IMAGE" --all-tags
        env:
          IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'latest' || 'test' }}

      - name: Install Entity Framework Core tools
        run: dotnet tool install dotnet-ef --global

      - name: Generate database migrations script
        run: dotnet ef migrations script --idempotent --project src/MovieApi/ --startup-project src/MovieApi/ --no-build --output migrate.sql

      - name: Upload database migrations script
        uses: actions/upload-artifact@v4.6.2
        with:
          name: migrate.sql
          path: migrate.sql

  staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment: Staging
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    env:
      RESOURCE_GROUP: GitHubDemo
      WEBAPP: ""
      CONTAINER_REGISTRY: ""
      POSTGRESQL_SERVER: ""
      CONNECTION_STRING: ""

    permissions:
      id-token: write

    steps:
      - name: Download database migrations script
        uses: actions/download-artifact@v4.2.1
        with:
          name: migrate.sql
          path: .

      - name: Azure Login
        uses: azure/login@v2.3.0
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get variables
        uses: azure/cli@v2.1.0
        with:
          inlineScript: |
            RESOURCE_GROUP=${{ env.RESOURCE_GROUP }}
            DATABASE_USER=${{ secrets.AZURE_CLIENT_DISPLAY_NAME }}
            WEBAPP="$(az webapp list --resource-group $RESOURCE_GROUP --query [].name --output tsv)"
            CONTAINER_REGISTRY="$(az acr list --resource-group $RESOURCE_GROUP --query [].name --output tsv)"
            POSTGRESQL_SERVER="$(az postgres flexible-server list --resource-group $RESOURCE_GROUP --query [0].name --output tsv)"
            POSTGRESQL_SERVER_HOST="$(az postgres flexible-server show --resource-group $RESOURCE_GROUP --name $POSTGRESQL_SERVER --query fullyQualifiedDomainName --output tsv)"
            DATABASE="MoviesStaging"
            PASSWORD="$(az account get-access-token --resource-type oss-rdbms --query accessToken --output tsv)"
            CONNECTION_STRING="psql host='$POSTGRESQL_SERVER_HOST' port=5432 dbname='$DATABASE' user='$DATABASE_USER' password='$PASSWORD' sslmode=require options='--client_min_messages=WARNING'"

            echo "WEBAPP=$WEBAPP" >> "$GITHUB_ENV"
            echo "CONTAINER_REGISTRY=$CONTAINER_REGISTRY" >> "$GITHUB_ENV"
            echo "POSTGRESQL_SERVER=$POSTGRESQL_SERVER" >> "$GITHUB_ENV"
            echo "CONNECTION_STRING=$CONNECTION_STRING" >> "$GITHUB_ENV"

      - name: Apply database migrations
        uses: azure/postgresql@v1
        with:
          connection-string: ${{ env.CONNECTION_STRING }}
          server-name: ${{ env.POSTGRESQL_SERVER }}
          plsql-file: migrate.sql

      - name: Deploy Web App Container
        uses: azure/webapps-deploy@v3.0.2
        with:
          app-name: ${{ env.WEBAPP }}
          slot-name: staging
          images: ${{ env.CONTAINER_REGISTRY }}.azurecr.io/ondfisk-githubdemo:${{ github.sha }}

  production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: staging
    environment: Production
    if: github.ref == 'refs/heads/main'

    env:
      RESOURCE_GROUP: GitHubDemo
      WEBAPP: ""
      CONTAINER_REGISTRY: ""
      POSTGRESQL_SERVER: ""
      CONNECTION_STRING: ""

    permissions:
      id-token: write

    steps:
      - name: Download database migrations script
        uses: actions/download-artifact@v4.2.1
        with:
          name: migrate.sql
          path: .

      - name: Azure Login
        uses: azure/login@v2.3.0
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get variables
        uses: azure/cli@v2.1.0
        with:
          inlineScript: |
            RESOURCE_GROUP=${{ env.RESOURCE_GROUP }}
            DATABASE_USER=${{ secrets.AZURE_CLIENT_DISPLAY_NAME }}
            WEBAPP="$(az webapp list --resource-group $RESOURCE_GROUP --query [].name --output tsv)"
            CONTAINER_REGISTRY="$(az acr list --resource-group $RESOURCE_GROUP --query [].name --output tsv)"
            POSTGRESQL_SERVER="$(az postgres flexible-server list --resource-group $RESOURCE_GROUP --query [0].name --output tsv)"
            POSTGRESQL_SERVER_HOST="$(az postgres flexible-server show --resource-group $RESOURCE_GROUP --name $POSTGRESQL_SERVER --query fullyQualifiedDomainName --output tsv)"
            DATABASE="Movies"
            PASSWORD="$(az account get-access-token --resource-type oss-rdbms --query accessToken --output tsv)"
            CONNECTION_STRING="psql host='$POSTGRESQL_SERVER_HOST' port=5432 dbname='$DATABASE' user='$DATABASE_USER' password='$PASSWORD' sslmode=require options='--client_min_messages=WARNING'"

            echo "WEBAPP=$WEBAPP" >> "$GITHUB_ENV"
            echo "CONTAINER_REGISTRY=$CONTAINER_REGISTRY" >> "$GITHUB_ENV"
            echo "POSTGRESQL_SERVER=$POSTGRESQL_SERVER" >> "$GITHUB_ENV"
            echo "CONNECTION_STRING=$CONNECTION_STRING" >> "$GITHUB_ENV"

      - name: Apply database migrations
        uses: azure/postgresql@v1
        with:
          connection-string: ${{ env.CONNECTION_STRING }}
          server-name: ${{ env.POSTGRESQL_SERVER }}
          plsql-file: migrate.sql

      - name: Swap Staging With Production
        uses: azure/cli@v2.1.0
        with:
          inlineScript: |
            az webapp deployment slot swap --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP }} --slot staging
